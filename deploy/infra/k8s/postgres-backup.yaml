apiVersion: v1
kind: Secret
metadata:
  name: pg-backup-secrets
  namespace: iot
  annotations:
    sealedsecrets.bitnami.com/managed: "true"
type: Opaque
data:
  PGUSER: PLACEHOLDER_BASE64
  PGPASSWORD: PLACEHOLDER_BASE64
  PGHOST: PLACEHOLDER_BASE64
  PGDATABASE: PLACEHOLDER_BASE64
  S3_ENDPOINT: PLACEHOLDER_BASE64
  S3_BUCKET: PLACEHOLDER_BASE64
  AWS_ACCESS_KEY_ID: PLACEHOLDER_BASE64
  AWS_SECRET_ACCESS_KEY: PLACEHOLDER_BASE64
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup
  namespace: iot
spec:
  schedule: "0 */6 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: pgdump
              image: postgres:16-alpine
              envFrom:
                - secretRef: {name: pg-backup-secrets}
              command:
                - sh
                - -c
                - |
                  set -e
                  ts=$(date +%Y%m%dT%H%M%SZ)
                  pg_dump -Fc -h "$PGHOST" -U "$PGUSER" -d "$PGDATABASE" > /tmp/backup-${ts}.dump
                  apk add --no-cache curl ca-certificates
                  curl -X PUT -T /tmp/backup-${ts}.dump "$S3_ENDPOINT/$S3_BUCKET/pg/backup-${ts}.dump"
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-wal-archive
  namespace: iot
spec:
  schedule: "*/10 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure
          containers:
            - name: wal-g
              image: ghcr.io/wal-g/wal-g:2.0.1
              envFrom:
                - secretRef: {name: pg-backup-secrets}
              env:
                - {name: WALG_S3_PREFIX, value: "s3://$(S3_BUCKET)/pg"}
              command:
                - sh
                - -c
                - |
                  echo "Placeholder for WAL-G setup (requires Postgres configuration for archive_command)."
                  exit 0
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pg-restore-validate
  namespace: iot
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: restore-validate
          image: postgres:16-alpine
          envFrom:
            - secretRef: {name: pg-backup-secrets}
          command:
            - sh
            - -c
            - |
              set -e
              apk add --no-cache curl ca-certificates
              latest=$(curl -s "$S3_ENDPOINT/$S3_BUCKET/pg/" | tail -n1 | awk '{print $NF}')
              curl -s -o /tmp/restore.dump "$S3_ENDPOINT/$S3_BUCKET/pg/$latest"
              createdb -h "$PGHOST" -U "$PGUSER" restore_test || true
              pg_restore -h "$PGHOST" -U "$PGUSER" -d restore_test /tmp/restore.dump
              psql -h "$PGHOST" -U "$PGUSER" -d restore_test -c 'select 1;'