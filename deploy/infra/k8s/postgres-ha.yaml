apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: iot
  labels: {app: postgres}
spec:
  ports:
    - {name: postgres, port: 5432, targetPort: 5432}
  clusterIP: None
  selector: {app: postgres}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: iot
spec:
  serviceName: postgres
  replicas: 3
  selector:
    matchLabels: {app: postgres}
  template:
    metadata:
      labels: {app: postgres}
    spec:
      containers:
        - name: patroni
          image: quay.io/zalando/patroni:3.3.2
          env:
            - {name: PATRONI_NAMESPACE, valueFrom: {fieldRef: {fieldPath: metadata.namespace}}}
            - {name: PATRONI_SCOPE, value: iot-cluster}
            - {name: PATRONI_KUBERNETES_LABELS, value: '{"app":"postgres"}'}
            - {name: PATRONI_POSTGRESQL_DATA_DIR, value: /data/pgdata}
            - {name: PATRONI_POSTGRESQL_CONNECT_ADDRESS, valueFrom: {fieldRef: {fieldPath: status.podIP}}}
            - {name: PATRONI_POSTGRESQL_LISTEN, value: '0.0.0.0:5432'}
            - {name: PATRONI_RESTAPI_LISTEN, value: '0.0.0.0:8008'}
            - {name: PATRONI_RESTAPI_CONNECT_ADDRESS, valueFrom: {fieldRef: {fieldPath: status.podIP}}}
            - {name: PGPASSWORD_SUPERUSER, valueFrom: {secretKeyRef: {name: pg-superuser, key: password}}}
            - {name: PATRONI_SUPERUSER_PASSWORD, valueFrom: {secretKeyRef: {name: pg-superuser, key: password}}}
            - {name: PATRONI_REPLICATION_USERNAME, value: replicator}
            - {name: PATRONI_REPLICATION_PASSWORD, valueFrom: {secretKeyRef: {name: pg-repl, key: password}}}
            - name: PATRONI_POSTGRESQL_PARAMETERS
              value: |
                archive_mode: 'on'
                wal_level: 'replica'
                max_wal_senders: 10
                archive_timeout: 60
                archive_command: 'sh -c "command -v wal-g >/dev/null 2>&1 && wal-g wal-push %p || true"'
            - name: WALG_S3_PREFIX
              value: "s3://$(S3_BUCKET)/pg"
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef: {name: pg-backup-secrets, key: AWS_ACCESS_KEY_ID}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef: {name: pg-backup-secrets, key: AWS_SECRET_ACCESS_KEY}
          ports:
            - {name: postgres, containerPort: 5432}
            - {name: patroni, containerPort: 8008}
          volumeMounts:
            - {name: data, mountPath: /data}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: pg-superuser
  namespace: iot
type: Opaque
data:
  password: UEFTU1dPUkQ= # base64 of 'PASSWORD'
---
apiVersion: v1
kind: Secret
metadata:
  name: pg-repl
  namespace: iot
type: Opaque
data:
  password: UEFTU1dPUkQ= # base64 of 'PASSWORD'