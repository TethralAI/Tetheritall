apiVersion: v1
kind: Namespace
metadata:
  name: chaos-testing
---
apiVersion: batch/v1
kind: Job
metadata:
  name: network-partition-test
  namespace: chaos-testing
spec:
  template:
    spec:
      containers:
      - name: chaos-test
        image: nicolaka/netshoot:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Starting network partition test..."
          
          # Test network connectivity between services
          echo "Testing connectivity to suggestion service..."
          kubectl exec -n iot deployment/suggestion -- curl -f http://localhost:8300/healthz || echo "Suggestion service unreachable"
          
          echo "Testing connectivity to PostgreSQL..."
          kubectl exec -n iot deployment/suggestion -- nc -z postgres 5432 || echo "PostgreSQL unreachable"
          
          echo "Testing connectivity to Redis..."
          kubectl exec -n iot deployment/suggestion -- nc -z redis 6379 || echo "Redis unreachable"
          
          echo "Network partition test completed"
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: pod-failure-test
  namespace: chaos-testing
spec:
  template:
    spec:
      serviceAccountName: chaos-test-sa
      containers:
      - name: chaos-test
        image: bitnami/kubectl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Starting pod failure test..."
          
          # Get current suggestion pods
          PODS=$(kubectl get pods -n iot -l app=suggestion -o jsonpath='{.items[*].metadata.name}')
          
          for pod in $PODS; do
            echo "Testing failure of pod: $pod"
            
            # Delete one pod to simulate failure
            kubectl delete pod $pod -n iot
            
            # Wait for pod to be recreated
            echo "Waiting for pod to be recreated..."
            kubectl wait --for=condition=ready pod -l app=suggestion -n iot --timeout=300s
            
            # Test service availability
            echo "Testing service availability after pod failure..."
            kubectl exec -n iot deployment/suggestion -- curl -f http://localhost:8300/healthz || echo "Service unavailable after pod failure"
            
            sleep 30
          done
          
          echo "Pod failure test completed"
      restartPolicy: Never
---
apiVersion: batch/v1
kind: Job
metadata:
  name: load-test
  namespace: chaos-testing
spec:
  template:
    spec:
      containers:
      - name: load-test
        image: grafana/k6:latest
        command:
        - k6
        - run
        - /scripts/load-test.js
        volumeMounts:
        - name: load-test-script
          mountPath: /scripts
      volumes:
      - name: load-test-script
        configMap:
          name: load-test-script
      restartPolicy: Never
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: load-test-script
  namespace: chaos-testing
data:
  load-test.js: |
    import http from 'k6/http';
    import { check, sleep } from 'k6';
    
    export const options = {
      stages: [
        { duration: '2m', target: 100 }, // Ramp up to 100 users
        { duration: '5m', target: 100 }, // Stay at 100 users
        { duration: '2m', target: 200 }, // Ramp up to 200 users
        { duration: '5m', target: 200 }, // Stay at 200 users
        { duration: '2m', target: 0 },   // Ramp down to 0 users
      ],
      thresholds: {
        http_req_duration: ['p(95)<2000'], // 95% of requests must complete below 2s
        http_req_failed: ['rate<0.1'],     // Error rate must be below 10%
      },
    };
    
    const BASE_URL = 'http://suggestion.iot.svc.cluster.local:8300';
    
    export default function () {
      const responses = http.batch([
        ['GET', `${BASE_URL}/healthz`],
        ['GET', `${BASE_URL}/readyz`],
        ['POST', `${BASE_URL}/generate`, JSON.stringify({
          user_id: 'test-user',
          session_id: 'test-session',
          context_hints: {
            time_of_day: 'morning',
            location: 'home'
          }
        }), {
          headers: { 'Content-Type': 'application/json' },
        }],
      ]);
    
      check(responses[0], {
        'health check status is 200': (r) => r.status === 200,
      });
      
      check(responses[1], {
        'ready check status is 200': (r) => r.status === 200,
      });
      
      check(responses[2], {
        'suggestion generation status is 200': (r) => r.status === 200,
        'suggestion generation time < 2s': (r) => r.timings.duration < 2000,
      });
    
      sleep(1);
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: chaos-test-sa
  namespace: chaos-testing
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: chaos-test-role
  namespace: iot
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: chaos-test-role-binding
  namespace: iot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: chaos-test-role
subjects:
- kind: ServiceAccount
  name: chaos-test-sa
  namespace: chaos-testing
