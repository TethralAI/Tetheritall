# Complete Infrastructure Deployment for Tethral Suggestion Engine
# This file orchestrates the deployment of all foundational infrastructure components

# 1. Create namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: iot
  labels:
    name: iot
---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
---
apiVersion: v1
kind: Namespace
metadata:
  name: ingress-nginx
  labels:
    name: ingress-nginx
---
apiVersion: v1
kind: Namespace
metadata:
  name: cert-manager
  labels:
    name: cert-manager
---
apiVersion: v1
kind: Namespace
metadata:
  name: chaos-testing
  labels:
    name: chaos-testing

# 2. Resource quotas for the iot namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: iot-quota
  namespace: iot
spec:
  hard:
    requests.cpu: "8"
    requests.memory: 16Gi
    limits.cpu: "16"
    limits.memory: 32Gi
    persistentvolumeclaims: "10"
    services: "20"
    services.loadbalancers: "5"

# 3. Network policies for the iot namespace
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny-all
  namespace: iot
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns
  namespace: iot
spec:
  podSelector: {}
  policyTypes:
  - Egress
  egress:
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53

# 4. Priority classes
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: app-critical
value: 1000000
globalDefault: false
description: "Critical application pods"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: app-standard
value: 100000
globalDefault: false
description: "Standard application pods"
---
apiVersion: scheduling.k8s.io/v1
kind: PriorityClass
metadata:
  name: app-low
value: 10000
globalDefault: false
description: "Low priority application pods"

# 5. Pod disruption budgets for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: postgres-pdb
  namespace: iot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: postgres
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: iot
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: redis

# 6. Horizontal Pod Autoscalers for infrastructure components
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: postgres-hpa
  namespace: iot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: postgres
  minReplicas: 3
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-hpa
  namespace: iot
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: StatefulSet
    name: redis
  minReplicas: 3
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70

# 7. Service monitors for infrastructure monitoring
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: postgres-monitor
  namespace: monitoring
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: postgres
  endpoints:
  - port: postgres
    interval: 30s
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-monitor
  namespace: monitoring
  labels:
    release: prometheus
spec:
  selector:
    matchLabels:
      app: redis
  endpoints:
  - port: redis
    interval: 30s

# 8. Prometheus rules for infrastructure alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: infrastructure-alerts
  namespace: monitoring
  labels:
    release: prometheus
spec:
  groups:
  - name: infrastructure
    rules:
    - alert: PostgresDown
      expr: up{app="postgres"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "PostgreSQL is down"
        description: "PostgreSQL service is not responding"
    
    - alert: RedisDown
      expr: up{app="redis"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Redis is down"
        description: "Redis service is not responding"
    
    - alert: HighPostgresConnections
      expr: pg_stat_database_numbackends > 80
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High PostgreSQL connections"
        description: "PostgreSQL has {{ $value }} active connections"
    
    - alert: HighRedisMemory
      expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High Redis memory usage"
        description: "Redis memory usage is above 80%"

# 9. ConfigMaps for infrastructure configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: infrastructure-config
  namespace: iot
data:
  postgres.conf: |
    # PostgreSQL configuration for high availability
    max_connections = 200
    shared_buffers = 256MB
    effective_cache_size = 1GB
    maintenance_work_mem = 64MB
    checkpoint_completion_target = 0.9
    wal_buffers = 16MB
    default_statistics_target = 100
    random_page_cost = 1.1
    effective_io_concurrency = 200
    work_mem = 4MB
    min_wal_size = 1GB
    max_wal_size = 4GB
    max_worker_processes = 8
    max_parallel_workers_per_gather = 4
    max_parallel_workers = 8
    max_parallel_maintenance_workers = 4
  
  redis.conf: |
    # Redis configuration for high availability
    bind 0.0.0.0
    port 6379
    tcp-backlog 511
    timeout 0
    tcp-keepalive 300
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    replica-serve-stale-data yes
    replica-read-only yes
    repl-diskless-sync no
    repl-diskless-sync-delay 5
    repl-ping-replica-period 10
    repl-timeout 60
    repl-disable-tcp-nodelay no
    replica-priority 100
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    lazyfree-lazy-eviction no
    lazyfree-lazy-expire no
    lazyfree-lazy-server-del no
    replica-lazy-flush no
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    aof-load-truncated yes
    aof-use-rdb-preamble yes

# 10. Secrets for infrastructure (placeholders - should be replaced with actual values)
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: iot
type: Opaque
data:
  password: cG9zdGdyZXM=  # postgres (base64 encoded)
  username: cG9zdGdyZXM=  # postgres (base64 encoded)
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: iot
type: Opaque
data:
  password: cmVkaXM=  # redis (base64 encoded)

# 11. Persistent volume claims for infrastructure
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data
  namespace: iot
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: iot
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 50Gi
